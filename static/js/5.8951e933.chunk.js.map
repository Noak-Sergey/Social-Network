{"version":3,"sources":["components/common/FormsControls/FormsControls.module.css","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.ts","components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx"],"names":["module","exports","FormControl","input","meta","touched","error","children","hasError","className","styles","formControl","Textarea","props","restProps","Input","required","value","maxLengthCreator","maxLength","length","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","to","DialogItem","path","id","c","dialog","active","name","Message","message","maxLength15","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","placeholder","validate","DialogsContainer","compose","dialogsPage","dispatch","sendMessage","newMessageBody","sendMessageCreator","dialogsElements","dialogs","map","d","messagesElements","messages","m","dialogsItems","values"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,0C,yJCGrHC,EAA2C,SAAC,GAA4C,EAA3CC,MAA4C,IAAD,IAApCC,KAAMC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,SACtEC,EAAWH,GAAWC,EAC5B,OACI,sBAAKG,UAAWC,IAAOC,YAAc,KAAOH,EAAWE,IAAOJ,MAAQ,IAAtE,UACI,8BACKC,IAEJC,GAAY,+BAAOF,QAKnBM,EAAwC,SAACC,GAAW,IACvDV,EAAwBU,EAAxBV,MAAWW,EAD2C,YAC9BD,EAD8B,WAE5D,OAAO,eAACX,EAAD,2BAAiBW,GAAjB,kBAAyB,oDAAcV,GAAWW,IAAlD,SAGEC,EAAqC,SAACF,GAAW,IACpDV,EAAuBU,EAAvBV,MAAUW,EADyC,YAC5BD,EAD4B,WAEzD,OAAO,eAACX,EAAD,2BAAiBW,GAAjB,kBAAyB,iDAAWV,GAAWW,IAA/C,U,iCCvBX,oEAAO,IAAME,EAAW,SAACC,GACrB,IAAGA,EAEH,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAAsB,SAACF,GACnD,GAAGA,GAASA,EAAMG,OAASD,EAAY,MAAM,iBAAN,OAAwBA,EAAxB,e,oBCN3CnB,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,oHCO/MoB,EAA6B,SAACC,GAC9B,MAAO,CACHC,OAAQD,EAAME,KAAKD,SAGpB,SAASE,EAAqBC,GAYjC,OADqCC,YAAQN,EAARM,EATrC,SAA2Bd,GAAuC,IACzDU,EAAwBV,EAAxBU,OAAWT,EAD6C,YAChCD,EADgC,YAG7D,OAAKU,EAEE,cAACG,EAAD,eAAeZ,IAFF,cAAC,IAAD,CAAUc,GAAI,gB,4ICT7BC,EAAuC,SAAChB,GAEjD,IAAIiB,EAAO,YAAcjB,EAAMkB,GAE/B,OAAO,qBAAKtB,UAAWuB,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACH,eAAC,IAAD,CAASN,GAAIE,EAAb,cAAqBjB,EAAMsB,KAA3B,UCNKC,EAAiC,SAACvB,GAC3C,OAAO,qBAAKJ,UAAWuB,IAAEK,QAAlB,SAA4BxB,EAAMwB,W,oCCCvCC,EAAcpB,YAAiB,IAmBxBqB,EAAsBC,YAA8B,CAACC,KAAK,wBAApCD,EAjBqC,SAAC3B,GACrE,OACI,uBAAM6B,SAAU7B,EAAM8B,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWjC,IACXuB,KAAK,iBACLW,YAAY,qBACZC,SAAU,CAAC/B,IAASsB,OAG/B,8BACI,kD,yBCQHU,EAAmBC,YAA6BtB,aArBvC,SAACL,GACnB,MAAO,CACH4B,YAAa5B,EAAM4B,gBAQF,SAACC,GACtB,MAAO,CACHC,YAAa,SAACC,GACVF,EAASG,YAAmBD,SASpC5B,IAD4BwB,EChBc,SAACpC,GAC3C,IAAIS,EAAQT,EAAMqC,YAEdK,EAAkBjC,EAAMkC,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAuBvB,KAAMuB,EAAEvB,KAAMJ,GAAI2B,EAAE3B,IAA1B2B,EAAE3B,OAC5D4B,EAAmBrC,EAAMsC,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAoBxB,QAASwB,EAAExB,SAAjBwB,EAAE9B,OAS/D,OACI,sBAAKtB,UAAWuB,IAAEwB,QAAlB,UACI,qBAAK/C,UAAWuB,IAAE8B,aAAlB,SACKP,IAEL,qBAAK9C,UAAWuB,IAAE4B,SAAlB,SACKD,IAEL,cAACpB,EAAD,CAAqBG,SAdT,SAACqB,GACjBlD,EAAMuC,YAAYW,EAAOV","file":"static/js/5.8951e933.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__1UTq0\",\"error\":\"FormsControls_error__1cNEC\",\"formSummaryError\":\"FormsControls_formSummaryError__3P4uL\"};","import React from \"react\";\nimport styles from './FormsControls.module.css'\nimport {WrappedFieldProps} from \"redux-form\";\n\nconst FormControl: React.FC<WrappedFieldProps> = ({input, meta:{touched, error},children}) => {\n    const hasError = touched && error\n    return (\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\n            <div>\n                {children}\n            </div>\n            {hasError && <span>{error}</span>}\n        </div>\n    )\n}\n\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\n    const{input,  ...restProps} = props;\n    return <FormControl {...props}> <textarea {...input} {...restProps}/> </FormControl>\n}\n\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\n    const{input, ...restProps} = props;\n    return <FormControl {...props}> <input {...input} {...restProps}/> </FormControl>\n}","export const required = (value:string) => {\n    if(value) return undefined;\n\n    return 'Field is required';\n}\n\nexport const maxLengthCreator = (maxLength:number) => (value:string) => {\n    if(value && value.length > maxLength ) return `Max length is ${maxLength} symbols`;\n    return undefined;\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2ZAZQ\",\"dialogsItems\":\"Dialogs_dialogsItems__278GV\",\"dialog\":\"Dialogs_dialog__35t7-\",\"active\":\"Dialogs_active__3W_ts\",\"messages\":\"Dialogs_messages__1q-U8\",\"message\":\"Dialogs_message__rKq34\"};","import {Redirect} from \"react-router-dom\";\nimport React, {ComponentType} from \"react\";\nimport {AppStateType} from \"../Redux/redux-store\";\nimport {connect} from \"react-redux\";\n\ntype mapStateToPropsForRedirectType = {\n    isAuth: boolean\n}\nlet mapStateToPropsForRedirect = (state: AppStateType): mapStateToPropsForRedirectType => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\nexport function withAuthRedirect <T>(Component:ComponentType<T>) {\n\n    function RedirectComponent(props:mapStateToPropsForRedirectType) {\n        let {isAuth, ...restProps} = props\n\n        if (!isAuth) return <Redirect to={'/login'}/>\n\n        return <Component {...restProps as T} />\n\n    }\n\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\n    return ConnectedAuthRedirectComponent\n}\n\n","import React from \"react\";\nimport c from './../Dialogs.module.css'\nimport {NavLink} from \"react-router-dom\";\n\ntype DialogItemType = {\n    name: string\n    id: number\n}\n\nexport const DialogItem: React.FC<DialogItemType> = (props) => {\n\n    let path = '/dialogs/' + props.id;\n\n    return <div className={c.dialog + ' ' + c.active}>\n        <NavLink to={path}> {props.name} </NavLink>\n    </div>\n}\n","import React from \"react\";\nimport c from './../Dialogs.module.css'\n\n\ntype MessageType = {\n    message: string\n}\n\nexport const Message: React.FC<MessageType> = (props) => {\n    return <div className={c.message}>{props.message}</div>\n}\n\n","import React from \"react\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\n\n\nexport type AddMessageFormType = {\n    newMessageBody:string\n}\n\nconst maxLength15 = maxLengthCreator(15)\n\nconst AddMessageForm: React.FC<InjectedFormProps<AddMessageFormType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field component={Textarea}\n                       name='newMessageBody'\n                       placeholder='Enter your message'\n                       validate={[required,maxLength15,]}\n                />\n            </div>\n            <div>\n                <button>Send</button>\n            </div>\n        </form>\n    )\n}\n\nexport const AddMessageFormRedux = reduxForm<AddMessageFormType>({form:'dialogAddMessageForm'})(AddMessageForm);","import React from \"react\";\nimport {sendMessageCreator} from \"../../Redux/dialogs-reducer\";\nimport {Dialogs} from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {RootStateType} from \"../../Redux/redux-store\";\nimport {ActionsTypes} from \"../../Redux/storeType\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\n\nlet mapStateToProps = (state:RootStateType) => {\n    return {\n        dialogsPage: state.dialogsPage\n    }\n}\n\ntype MapDispatchToPropsType = {\n    sendMessage:(newMessageBody:string) => void\n}\n\nlet mapDispatchToProps = (dispatch:(action: ActionsTypes) => void):MapDispatchToPropsType => {\n    return {\n        sendMessage: (newMessageBody:string) => {\n            dispatch(sendMessageCreator(newMessageBody))\n        }\n    }\n}\n\n// let AuthRedirectComponent = withAuthRedirect(Dialogs);\n//\n// export const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\nexport const DialogsContainer = compose<React.ComponentType>(connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(Dialogs)\n\n","import React from \"react\";\nimport c from './Dialogs.module.css'\nimport {DialogItem} from \"./DialogItem/DialogItem\";\nimport {Message} from \"./Message/Message\";\nimport {DialogPageType} from \"../../Redux/storeType\";\nimport {AddMessageFormRedux, AddMessageFormType} from \"./AddMessageForm/AddMessageForm\";\n\nexport type DialogsType = {\n    dialogsPage: DialogPageType\n    sendMessage: (newMessageBody:string) => void\n    isAuth: boolean\n}\n\n\n\nexport const Dialogs: React.FC<DialogsType> = (props) => {\n    let state = props.dialogsPage;\n\n    let dialogsElements = state.dialogs.map(d => <DialogItem key={d.id} name={d.name} id={d.id}/>)\n    let messagesElements = state.messages.map(m => <Message key={m.id} message={m.message}/>)\n\n\n    let addNewMessage = (values:AddMessageFormType) => {\n        props.sendMessage(values.newMessageBody);\n    }\n\n   // if(!props.isAuth) return <Redirect to={'/login'}/>\n\n    return (\n        <div className={c.dialogs}>\n            <div className={c.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={c.messages}>\n                {messagesElements}\n            </div>\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\n        </div>\n    )\n}\n\n"],"sourceRoot":""}