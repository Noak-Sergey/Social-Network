{"version":3,"sources":["components/common/FormsControls/FormsControls.module.css","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.ts","components/Login/LogIn.tsx"],"names":["module","exports","FormControl","input","meta","touched","error","children","hasError","className","styles","formControl","Textarea","props","restProps","Input","required","value","maxLengthCreator","maxLength","length","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","placeholder","name","component","validate","type","s","formSummaryError","Login","isAuth","to","formData","login","email","password","rememberMe","LoginContainer","connect","state","auth"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,0C,yJCGrHC,EAA2C,SAAC,GAA4C,EAA3CC,MAA4C,IAAD,IAApCC,KAAMC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,SACtEC,EAAWH,GAAWC,EAC5B,OACI,sBAAKG,UAAWC,IAAOC,YAAc,KAAOH,EAAWE,IAAOJ,MAAQ,IAAtE,UACI,8BACKC,IAEJC,GAAY,+BAAOF,QAKnBM,EAAwC,SAACC,GAAW,IACvDV,EAAwBU,EAAxBV,MAAWW,EAD2C,YAC9BD,EAD8B,WAE5D,OAAO,eAACX,EAAD,2BAAiBW,GAAjB,kBAAyB,oDAAcV,GAAWW,IAAlD,SAGEC,EAAqC,SAACF,GAAW,IACpDV,EAAuBU,EAAvBV,MAAUW,EADyC,YAC5BD,EAD4B,WAEzD,OAAO,eAACX,EAAD,2BAAiBW,GAAjB,kBAAyB,iDAAWV,GAAWW,IAA/C,U,iCCvBX,oEAAO,IAAME,EAAW,SAACC,GACrB,IAAGA,EAEH,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAAsB,SAACF,GACnD,GAAGA,GAASA,EAAMG,OAASD,EAAY,MAAM,iBAAN,OAAwBA,EAAxB,e,4NCqCrCE,EAAiBC,YAAwB,CAACC,KAAM,SAA/BD,EAvBsC,SAAC,GAA2B,IAA1BE,EAAyB,EAAzBA,aAAclB,EAAW,EAAXA,MACzE,OACI,uBAAMmB,SAAUD,EAAhB,UACI,8BACI,cAAC,IAAD,CAAOE,YAAa,QAASC,KAAM,QAASC,UAAWb,IAAOc,SAAU,CAACb,SAE7E,8BACI,cAAC,IAAD,CAAOU,YAAa,WAAYC,KAAM,WAAYG,KAAM,WAAYF,UAAWb,IAAOc,SAAU,CAACb,SAErG,gCACI,cAAC,IAAD,CAAOY,UAAWb,IAAOY,KAAM,aAAcG,KAAM,aADvD,iBAICxB,GAAS,qBAAKG,UAAWsB,IAAEC,iBAAlB,SACL1B,IAEL,8BACI,mDAQH2B,EAAQ,SAACpB,GAKlB,OAAGA,EAAMqB,OACE,cAAC,IAAD,CAAUC,GAAI,aAGrB,gCACI,uCACA,cAACd,EAAD,CAAgBI,SATP,SAACW,GACdvB,EAAMwB,MAAMD,EAASE,MAAOF,EAASG,SAAUH,EAASI,mBAqBnDC,EAAiBC,aANN,SAACC,GACrB,MAAO,CACHT,OAAQS,EAAMC,KAAKV,UAI4B,CAACG,WAA1BK,CAAkCT","file":"static/js/6.53c45e30.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__1UTq0\",\"error\":\"FormsControls_error__1cNEC\",\"formSummaryError\":\"FormsControls_formSummaryError__3P4uL\"};","import React from \"react\";\nimport styles from './FormsControls.module.css'\nimport {WrappedFieldProps} from \"redux-form\";\n\nconst FormControl: React.FC<WrappedFieldProps> = ({input, meta:{touched, error},children}) => {\n    const hasError = touched && error\n    return (\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\n            <div>\n                {children}\n            </div>\n            {hasError && <span>{error}</span>}\n        </div>\n    )\n}\n\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\n    const{input,  ...restProps} = props;\n    return <FormControl {...props}> <textarea {...input} {...restProps}/> </FormControl>\n}\n\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\n    const{input, ...restProps} = props;\n    return <FormControl {...props}> <input {...input} {...restProps}/> </FormControl>\n}","export const required = (value:string) => {\n    if(value) return undefined;\n\n    return 'Field is required';\n}\n\nexport const maxLengthCreator = (maxLength:number) => (value:string) => {\n    if(value && value.length > maxLength ) return `Max length is ${maxLength} symbols`;\n    return undefined;\n}","import React from 'react';\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Input} from \"../common/FormsControls/FormsControls\";\nimport {required} from \"../../utils/validators/validators\";\nimport {connect} from \"react-redux\";\nimport {login} from \"../../Redux/auth-reducer\";\nimport {Redirect} from \"react-router-dom\";\nimport {AppStateType} from \"../../Redux/redux-store\";\nimport s from \"../common/FormsControls/FormsControls.module.css\"\n\nexport type FormDataType = {\n    email: string\n    password: string\n    rememberMe: boolean\n}\n\nexport type LoginType = {\n    isAuth:boolean\n    login: (email: string, password: string, rememberMe: boolean) => void\n}\n\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = ({handleSubmit, error}) => {\n    return (\n        <form onSubmit={handleSubmit}>\n            <div>\n                <Field placeholder={'Email'} name={'email'} component={Input} validate={[required]} />\n            </div>\n            <div>\n                <Field placeholder={'Password'} name={'password'} type={'password'} component={Input} validate={[required]} />\n            </div>\n            <div>\n                <Field component={Input} name={'rememberMe'} type={\"checkbox\"}/>\n                remember me\n            </div>\n            {error && <div className={s.formSummaryError}>\n                {error}\n            </div>}\n            <div>\n                <button>Login</button>\n            </div>\n        </form>\n    )\n}\n\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm)\n\nexport const Login = (props:LoginType) => {\n\n    const onSubmit = (formData: FormDataType) => {\n        props.login(formData.email, formData.password, formData.rememberMe)\n    }\n    if(props.isAuth) {\n        return <Redirect to={'/profile'}/>\n    }\n    return (\n        <div>\n            <h1>Login</h1>\n            <LoginReduxForm onSubmit={onSubmit}/>\n        </div>\n    )\n}\ntype MapStatePropsType = {\n    isAuth:boolean\n}\nconst mapStateToProps = (state:AppStateType): MapStatePropsType => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport const LoginContainer = connect (mapStateToProps,{login})(Login)"],"sourceRoot":""}